generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id             String         @id @default(uuid())
  name           String
  slug           String         @unique
  description    String
  avatarImageUrl String
  coverImageUrl  String
  menuCategories MenuCategory[]
  products       Product[]
  orders         Order[]

  createdAt  DateTime @default(now())
  updateadAt DateTime @updatedAt
}

model MenuCategory {
  id           String     @id @default(uuid())
  name         String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String
  products     Product[]

  createdAt  DateTime @default(now())
  updateadAt DateTime @updatedAt
}

model Product {
  id             String         @id @default(uuid())
  name           String
  description    String
  priceInCents   Int
  imageUrl       String
  ingredients    String[]
  restaurant     Restaurant     @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId   String
  menuCategory   MenuCategory   @relation(fields: [menuCategoryId], references: [id], onDelete: Cascade)
  menuCategoryId String
  orderProducts  OrderProduct[]

  createdAt  DateTime @default(now())
  updateadAt DateTime @updatedAt
}

model Order {
  id                Int               @id @default(autoincrement())
  totalInCents      Int
  status            OrderStatus
  consumptionMethod ConsumptionMethod
  orderProducts     OrderProduct[]
  customerName      String
  customerCpf       String
  restaurant        Restaurant        @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId      String

  createdAt  DateTime @default(now())
  updateadAt DateTime @updatedAt
}

model OrderProduct {
  id           String  @id @default(uuid())
  product      Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId    String
  order        Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId      Int
  quantity     Int
  priceInCents Int

  createdAt  DateTime @default(now())
  updateadAt DateTime @updatedAt
}

enum OrderStatus {
  PENDING
  IN_PREPARATION
  FINISHED
  CANCELED
}

enum ConsumptionMethod {
  TAKEAWAY
  DINE_IN
}
